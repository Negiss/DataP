<?php

namespace App\Controller;

use App\Entity\Address;
use App\Entity\User;
use App\Form\AccountType;
use App\Form\RegistrationType;
use Doctrine\Common\Persistence\ObjectManager;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class SecurityController extends AbstractController
{
    /**
     * @Route("/register", name="register")
     */
    public function registration(Request $request, ObjectManager $om, UserPasswordEncoderInterface $encoder, \Swift_Mailer $mailer)
    {
        $user = new User();

        $form = $this->createForm(RegistrationType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $mail = $user->getEmail();
            $name = $user->getUsername();
            $hash = $encoder->encodePassword($user, $user->getPassword());
            $user->setPassword($hash);
            $user->setRegistration(new \DateTime('now'));
            $user->setActive(1);

            $message = (new \Swift_Message('Welcome on DataP !'))
                ->setFrom('exemple@dataprojekt')
                ->setTo($mail)
                ->setBody(
                    $this->renderView(
                        'mails/registration.html.twig',
                        ['name' => $name]
                    ),
                    'text/html'
                );

            $message->
            $om->persist($user);
            $om->flush();

            return $this->redirectToRoute('login');
        }

        return $this->render('security/registration.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/profile", name="profile")
     * @IsGranted("ROLE_USER")
     */
    public function edit(Request $request, ObjectManager $om) :Response
    {
        $user = $this->getUser();
        $form = $this->createForm(AccountType::class, $user);
        $form->handleRequest($request);

        $allowed = ['jpg', 'png'];

        if ($form->isSubmitted() && $form->isValid()) {
            if (!empty($form->get('avatar')->getData())) {
                $file = $form->get('avatar')->getData();
                $extension = $file->guessExtension();
                if (in_array($extension, $allowed)) {
                    $fileName = uniqid() . '.' . $file->guessExtension();
                    $file->move($this->getParameter('avatars_directory'), $fileName);
                    $user->setAvatar($fileName);
                } else {
                    return $this->redirectToRoute('profile');
                }
            }

            $om->persist($user);
            $om->flush();

            return $this->redirectToRoute('home');
        }

        return $this->render('home/profile.html.twig', [
            'form' => $form->createView()
        ]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by uniqid(),
        // which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/login", name="login")
     */
    public function login()
    {
        return $this->render('security/login.html.twig');
    }

    /**
     * @Route("/logout", name="logout")
     */
    public function logout()
    {

    }
}
